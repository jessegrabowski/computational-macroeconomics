block STEADY_STATE
{
	identities
	{
		nu[ss] = 0;
		zeta[ss] = 1;
		A[ss] = 1;
		
		pi[ss] = pi_star;
		P_tilde[ss] = ((1 - theta * pi[ss] ^ (epsilon - 1)) / (1 - theta)) ^ (1 / (1 - epsilon));
		P_star[ss] = (1 - theta) * P_tilde[ss] ^ (-epsilon) / (1 - theta * pi[ss] ^ epsilon);
		mc[ss] = (epsilon - 1) / epsilon * (1 - beta * theta * pi[ss] ^ epsilon) / 
			(1 - beta * theta * pi[ss] ^ (epsilon - 1)) * P_tilde[ss];
	
		r_G[ss] = pi[ss] / beta;
		r[ss] = 1 / beta - (1 - delta);
		w[ss] = (1 - alpha) * mc[ss] ^ (1 / (1 - alpha)) * (alpha / r[ss]) ^ (alpha / (1 - alpha));
		Y[ss] = (1 - alpha * delta * mc[ss] * P_star[ss] / r[ss]) ^ (-sigma_C / (sigma_H + sigma_C))
			* (w[ss] ^ (1 + sigma_H) / (chi_H * ((1  - alpha) * P_star[ss] * mc[ss]) ^ sigma_H)) ^ (1 / (sigma_H + sigma_C));
		Y_f[ss] = Y[ss] * P_star[ss];
		K[ss] = alpha * mc[ss] * Y_f[ss] / r[ss];
		H[ss] = (1 - alpha) * mc[ss] * Y_f[ss] / w[ss];
		I[ss] = delta * K[ss];
		C[ss] = Y[ss] - I[ss];
		
		lambda[ss] = C[ss] ^ (-sigma_C);
		q[ss] = lambda[ss];
		
		RHS[ss] = 1 / (1 - beta * theta * pi_star ^ epsilon) * Y[ss] * mc[ss];
		LHS[ss] = epsilon / (epsilon - 1) * RHS[ss] / P_tilde[ss];
		
		TC[ss] = -(r[ss] * K[ss] + w[ss] * H[ss]);
		Div[ss] = Y[ss] + TC[ss];
		U[ss] = 1 / (1 - beta) * (C[ss] ^ (1 - sigma_C) / (1 - sigma_C) - 
			chi_H * H[ss] ^ (1 + sigma_H) / (1 + sigma_H));
	};
};

block HOUSEHOLD
{
	definitions
	{
		u[] = C[] ^ (1 - sigma_C) / (1 - sigma_C) - 
			chi_H * H[] ^ (1 + sigma_H) / (1 + sigma_H);
			
		S[] = (1 - phi_I / 2 * (I[] / I[-1] - 1)^2);
	};
	
	objective
	{
		U[] = u[] + beta * zeta[] * E[][U[1]];
	};
	
	controls
	{
		C[], I[], K[], B[], H[];
	};
	
	constraints
	{
		C[] + I[] + B[] / r_G[] = r[] * K[-1] + w[] * H[] + B[-1] / pi[] + Div[] : lambda[];
		K[] = (1 - delta) * K[-1] + S[] * I[] : q[];
	};
	
	identities
	{
		B[] = 0;
	};
	
	calibration
	{
		beta = 0.99;
		delta = 0.025;
		phi_I = 4;
		sigma_C = 2;
		sigma_H = 2;
		chi_H = 5;
	};
};

block INTERMEDIATE_FIRM
{
	objective
	{
		TC[] = -(r[] * K[-1] + w[] * H[]);
	};
	
	controls
	{
		K[-1], H[];
	};
	
	constraints
	{
		Y_f[] = A[] * K[-1] ^ (alpha) * H[] ^ (1 - alpha): mc[];
	};
	
	identities
	{
		Div[] = Y[] + TC[];
	};
	
	calibration
	{
		alpha = 0.3;
	};
};


block FIRM_PRICE_SETTING
{
	identities
	{
		P_tilde[] * LHS[] = epsilon / (epsilon - 1) * RHS[];
		LHS[] = Y[] + beta * theta * E[][lambda[1] / lambda[] * pi[1] ^ (epsilon - 1) * LHS[1]];
		RHS[] = Y[] * mc[] + beta * theta * E[][lambda[1] / lambda[] * pi[1] ^ epsilon * RHS[1]];
	};
	
	calibration
	{
		theta = 0.75;
		epsilon = 6;
	};
};

block PRICE_EVOLUTION
{
	identities
	{
		1 = theta * pi[] ^ (epsilon - 1) + (1 - theta) * P_tilde[] ^ (1 - epsilon);
	};
};

block PRICE_EFFICENCY_DISTORTION
{
	identities
	{
		P_star[] * Y[] = Y_f[];
		P_star[] = (1 - theta) * P_tilde[] ^ (-epsilon) + theta * pi[] ^ epsilon * P_star[-1];
	};
};

block MONETARY_POLICY
{
	identities
	{
		r_G[] / r_G[ss] = (pi[] / pi_star) ^ phi_pi * (Y[] / Y[ss]) * exp(nu[]);
	};
	
	calibration
	{
		pi_star = 1.005;
		phi_pi  = 1.5;
		phi_Y	= 0.5;
	};
};

block EXOGENOUS
{
	identities
	{
		log(zeta[]) = rho_zeta * log(zeta[-1]) + epsilon_zeta[];
		log(A[]) = rho_A * log(A[-1]) + epsilon_A[];
		nu[] = rho_nu * nu[-1] + epsilon_nu[];
	};
		
	shocks
	{
		epsilon_zeta[], epsilon_A[], epsilon_nu[];
	};

	calibration
	{
		rho_zeta = 0.5;
		rho_A = 0.9;
		rho_nu = 0.5;
	};
};